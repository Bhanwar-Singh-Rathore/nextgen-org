"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/client/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UploadAbortedError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError),\n/* harmony export */   UploadPausedError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generatePermittedFileTypes),\n/* harmony export */   isValidFileSize: () => (/* binding */ isValidFileSize),\n/* harmony export */   isValidFileType: () => (/* binding */ isValidFileType),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Array */ \"(ssr)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Micro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Micro */ \"(ssr)/./node_modules/effect/dist/esm/Micro.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! effect/Function */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n\n\n\n\n\n\nvar version$1 = \"7.4.0\";\n\nconst createDeferred = ()=>{\n    let resolve;\n    let reject;\n    const ac = new AbortController();\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        ac,\n        resolve,\n        reject\n    };\n};\n\nconst createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L112\"\n */ const createUTReporter = (cfg)=>(type, payload)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n            const url = createAPIRequestUrl({\n                url: cfg.url,\n                slug: cfg.endpoint,\n                actionType: type\n            });\n            const headers = new Headers((yield* effect_Micro__WEBPACK_IMPORTED_MODULE_1__.promise(async ()=>typeof cfg.headers === \"function\" ? await cfg.headers() : cfg.headers)));\n            headers.set(\"x-uploadthing-package\", cfg.package);\n            headers.set(\"x-uploadthing-version\", version$1);\n            headers.set(\"Content-Type\", \"application/json\");\n            const response = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(url, {\n                method: \"POST\",\n                body: JSON.stringify(payload),\n                headers\n            }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), /**\n         * We don't _need_ to validate the response here, just cast it for now.\n         * As of now, @effect/schema includes quite a few bytes we cut out by this...\n         * We have \"strong typing\" on the backend that ensures the shape should match.\n         */ effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map(effect_Function__WEBPACK_IMPORTED_MODULE_2__.unsafeCoerce), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"FetchError\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: `Failed to report event \"${type}\" to UploadThing server`,\n                    cause: e\n                }))), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"BadRequestError\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getErrorTypeFromStatusCode)(e.status),\n                    message: e.getMessage(),\n                    cause: e.json\n                }))), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"InvalidJson\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: \"Failed to parse response from UploadThing server\",\n                    cause: e\n                }))));\n            return response;\n        });\n\nconst uploadWithProgress = (file, rangeStart, presigned, onUploadProgress)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.async((resume)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", presigned.url, true);\n        xhr.setRequestHeader(\"Range\", `bytes=${rangeStart}-`);\n        xhr.setRequestHeader(\"x-uploadthing-version\", version$1);\n        xhr.responseType = \"json\";\n        let previousLoaded = 0;\n        xhr.upload.addEventListener(\"progress\", ({ loaded })=>{\n            const delta = loaded - previousLoaded;\n            onUploadProgress?.({\n                loaded,\n                delta\n            });\n            previousLoaded = loaded;\n        });\n        xhr.addEventListener(\"load\", ()=>{\n            resume(xhr.status >= 200 && xhr.status < 300 ? effect_Micro__WEBPACK_IMPORTED_MODULE_1__.succeed(xhr.response) : effect_Micro__WEBPACK_IMPORTED_MODULE_1__.die(`XHR failed ${xhr.status} ${xhr.statusText} - ${JSON.stringify(xhr.response)}`));\n        });\n        // Is there a case when the client would throw and\n        // ingest server not knowing about it? idts?\n        xhr.addEventListener(\"error\", ()=>{\n            resume(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\"\n            }));\n        });\n        const formData = new FormData();\n        formData.append(\"file\", rangeStart > 0 ? file.slice(rangeStart) : file);\n        xhr.send(formData);\n        return effect_Micro__WEBPACK_IMPORTED_MODULE_1__.sync(()=>xhr.abort());\n    });\nconst uploadFile = (file, presigned, opts)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(presigned.url, {\n        method: \"HEAD\"\n    }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map(({ headers })=>parseInt(headers.get(\"x-ut-range-start\") ?? \"0\", 10)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.tap((start)=>opts.onUploadProgress?.({\n            delta: start,\n            loaded: start\n        })), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((start)=>uploadWithProgress(file, start, presigned, (progressEvent)=>opts.onUploadProgress?.({\n                delta: progressEvent.delta,\n                loaded: progressEvent.loaded + start\n            }))), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map(effect_Function__WEBPACK_IMPORTED_MODULE_2__.unsafeCoerce), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((uploadResponse)=>({\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            lastModified: file.lastModified,\n            serverData: uploadResponse.serverData,\n            url: uploadResponse.url,\n            appUrl: uploadResponse.appUrl,\n            customId: presigned.customId,\n            type: file.type,\n            fileHash: uploadResponse.fileHash\n        })));\nconst uploadFilesInternal = (endpoint, opts)=>{\n    // classic service right here\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        package: opts.package,\n        url: opts.url,\n        headers: opts.headers\n    });\n    const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n    let totalLoaded = 0;\n    return reportEventToUT(\"upload\", {\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f)=>({\n                name: f.name,\n                size: f.size,\n                type: f.type,\n                lastModified: f.lastModified\n            }))\n    }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((presigneds)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.forEach(presigneds, (presigned, i)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.sync(()=>opts.onUploadBegin?.({\n                    file: opts.files[i].name\n                })), ()=>uploadFile(opts.files[i], presigned, {\n                    onUploadProgress: (ev)=>{\n                        totalLoaded += ev.delta;\n                        opts.onUploadProgress?.({\n                            file: opts.files[i],\n                            progress: Math.round(ev.loaded / opts.files[i].size * 100),\n                            loaded: ev.loaded,\n                            delta: ev.delta,\n                            totalLoaded,\n                            totalProgress: Math.round(totalLoaded / totalSize * 100)\n                        });\n                    }\n                })), {\n            concurrency: 6\n        })), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, window.fetch));\n};\n\nconst version = version$1;\n/**\n * Validate that a file is of a valid type given a route config\n * @public\n */ const isValidFileType = (file, routeConfig)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig)).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((type)=>file.type.includes(type)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.orElseSucceed(()=>false)));\n/**\n * Validate that a file is of a valid size given a route config\n * @public\n */ const isValidFileSize = (file, routeConfig)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig)).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((type)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fileSizeToBytes)(routeConfig[type].maxFileSize)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((maxFileSize)=>file.size <= maxFileSize), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.orElseSucceed(()=>false)));\n/**\n * Generate a typed uploader for a given FileRouter\n * @public\n */ const genUploader = (initOpts)=>{\n    const routeRegistry = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.createIdentityProxy)();\n    const controllableUpload = async (slug, opts)=>{\n        const uploads = new Map();\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        const utReporter = createUTReporter({\n            endpoint: String(endpoint),\n            package: initOpts.package,\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            headers: opts.headers\n        });\n        const presigneds = await effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromise(utReporter(\"upload\", {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size,\n                    type: f.type,\n                    lastModified: f.lastModified\n                }))\n        }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, window.fetch)));\n        const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n        let totalLoaded = 0;\n        const uploadEffect = (file, presigned)=>uploadFile(file, presigned, {\n                onUploadProgress: (progressEvent)=>{\n                    totalLoaded += progressEvent.delta;\n                    opts.onUploadProgress?.({\n                        ...progressEvent,\n                        file,\n                        progress: Math.round(progressEvent.loaded / file.size * 100),\n                        totalLoaded,\n                        totalProgress: Math.round(totalLoaded / totalSize * 100)\n                    });\n                }\n            }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, window.fetch));\n        for (const [i, p] of presigneds.entries()){\n            const file = opts.files[i];\n            const deferred = createDeferred();\n            uploads.set(file, {\n                deferred,\n                presigned: p\n            });\n            void effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(uploadEffect(file, p), {\n                signal: deferred.ac.signal\n            }).then((result)=>{\n                if (result._tag === \"Right\") {\n                    return deferred.resolve(result.right);\n                } else if (result.left._tag === \"Interrupt\") {\n                    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError();\n                }\n                throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(result.left);\n            }).catch((err)=>{\n                if (err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError) return;\n                deferred.reject(err);\n            });\n        }\n        /**\n     * Pause an ongoing upload\n     * @param file The file upload you want to pause. Can be omitted to pause all files\n     */ const pauseUpload = (file)=>{\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_3__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) return;\n                if (upload.deferred.ac.signal.aborted) {\n                    // Cancel the upload if it's already been paused\n                    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError();\n                }\n                upload.deferred.ac.abort();\n            }\n        };\n        /**\n     * Resume a paused upload\n     * @param file The file upload you want to resume. Can be omitted to resume all files\n     */ const resumeUpload = (file)=>{\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_3__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                upload.deferred.ac = new AbortController();\n                void effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(uploadEffect(file, upload.presigned), {\n                    signal: upload.deferred.ac.signal\n                }).then((result)=>{\n                    if (result._tag === \"Right\") {\n                        return upload.deferred.resolve(result.right);\n                    } else if (result.left._tag === \"Interrupt\") {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError();\n                    }\n                    throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(result.left);\n                }).catch((err)=>{\n                    if (err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError) return;\n                    upload.deferred.reject(err);\n                });\n            }\n        };\n        /**\n     * Wait for an upload to complete\n     * @param file The file upload you want to wait for. Can be omitted to wait for all files\n     */ const done = async (file)=>{\n            const promises = [];\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_3__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                promises.push(upload.deferred.promise);\n            }\n            const results = await Promise.all(promises);\n            return file ? results[0] : results;\n        };\n        return {\n            pauseUpload,\n            resumeUpload,\n            done\n        };\n    };\n    /**\n   * One step upload function that both requests presigned URLs\n   * and then uploads the files to UploadThing\n   */ const typedUploadFiles = (slug, opts)=>{\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        return uploadFilesInternal(endpoint, {\n            ...opts,\n            skipPolling: {},\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            package: initOpts.package,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            input: opts.input\n        }).pipe((effect)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(effect, opts.signal && {\n                signal: opts.signal\n            })).then((exit)=>{\n            if (exit._tag === \"Right\") {\n                return exit.right;\n            } else if (exit.left._tag === \"Interrupt\") {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError();\n            }\n            throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(exit.left);\n        });\n    };\n    return {\n        uploadFiles: typedUploadFiles,\n        createUpload: controllableUpload,\n        /**\n     * Identity object that can be used instead of raw strings\n     * that allows \"Go to definition\" in your IDE to bring you\n     * to the backend definition of a route.\n     */ routeRegistry\n    };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/client/index.js\n");

/***/ })

};
;